class Solution {
    public int[] sortArray(int[] nums) {
        quickSort(nums, 0, nums.length - 1);
        return nums;
    }

    public void quickSort(int[] nums, int low, int high) {
        if(low < high) {
            int pivot = partition(nums, low, high);
            quickSort(nums, low, pivot - 1);
            quickSort(nums, pivot + 1, high);
        }
    }

    // place all elements that are smaller to the left
    public int partition(int[] nums, int low, int high) {
        int mainNum = nums[high];
        int pivotIdx = low - 1;

        for(int currIdx = low; currIdx < high; currIdx ++) {
            // place it to the left
            if(nums[currIdx] < mainNum) {
                pivotIdx ++;
                swap(nums, currIdx, pivotIdx);
            }
        }

        pivotIdx ++;
        swap(nums, high, pivotIdx);

        return pivotIdx;
    }

    public void swap(int nums[], int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

class Result {

    /*
     * Complete the 'quickestWayUp' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. 2D_INTEGER_ARRAY ladders
     *  2. 2D_INTEGER_ARRAY snakes
     */

    public static int quickestWayUp(List<List<Integer>> ladders, List<List<Integer>> snakes) {
        // Write your code here
        Map<Integer, Integer> laddersMap = ladders.stream()
                                                  .collect(Collectors
                                                  .toMap(list -> list.get(0), 
                                                         list -> list.get(1)));
        
        Map<Integer, Integer> snakesMap = snakes.stream()
                                                .collect(Collectors
                                                .toMap(list -> list.get(0),
                                                       list -> list.get(1)));
        
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> seen = new HashSet<>();
        queue.add(1);
        seen.add(1);
        
        int res = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            res ++;
            
            for(int j = 0; j < size; j ++) {
                int curr = queue.poll();
                
                for(int k = 1; k <= 6; k ++) {
                    int next = curr + k;
                    
                    if(next > 100) continue;
                    
                    if(snakesMap.containsKey(next)) {
                        next = snakesMap.get(next);
                    }
                    if(laddersMap.containsKey(next)) {
                        next = laddersMap.get(next);
                    }
                    if(next == 100) {
                        return res;
                    }
                    if(!seen.contains(next)) {
                        seen.add(next);
                        queue.add(next);
                    }
                }           
            }
        }
        
        return -1;
    }

}

class Solution {
    public Node insert(Node head, int insertVal) {
        if(head == null) {
            Node n = new Node(insertVal);
            n.next = n;
            return n;
        }
        
        Node node = head;
        Node prev = null;

        while(prev == null || node != head) {
            if(node.val > node.next.val) {
                if(node.val <= insertVal || node.next.val >= insertVal) {
                    Node n = new Node(insertVal);
                    Node temp = node.next;
                    node.next = n;
                    n.next = temp;

                    return head;
                }
             } else {
                if(node.val <= insertVal && node.next.val >= insertVal) {
                    Node n = new Node(insertVal);
                    Node temp = node.next;
                    node.next = n;
                    n.next = temp;
                    return head;
                }
             }
             prev = node;
             node = node.next;            
        }

        Node n = new Node(insertVal);
        prev.next = n;
        n.next = node;

        return head;
    }
}

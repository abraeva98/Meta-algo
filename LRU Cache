class Node {
    int val;
    int key;
    Node prev;
    Node next;

    public Node(int val, int key) {
        this.val = val;
        this.key = key;
        prev = null;
        next = null;
    }
}

class LRUCache {
    Map<Integer, Node> map;
    Node tail;
    Node head;
    int capacity;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) return -1;     
        Node mostRecent = map.get(key);

        remove(mostRecent);
        add(mostRecent);

        return mostRecent.val;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)) {
            remove(map.get(key));
        } 
        Node node = new Node(value, key);
        add(node);
        map.put(key, node);

        if(capacity < map.size()) {
            Node removedHead = head.next;
            remove(removedHead);
            map.remove(removedHead.key);
        }
    }

    public void remove(Node node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    public void add(Node node) {
        Node realTail = tail.prev;
        node.next = tail;
        tail.prev = node;
        node.prev = realTail;
        realTail.next = node;
    }
}

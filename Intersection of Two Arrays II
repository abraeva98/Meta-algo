class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        if(nums2.length > nums1.length) return intersect(nums2, nums1);

        Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums2) {
            map.put(n, map.getOrDefault(n, 0) + 1);
        }

        int k = 0;

        for(int i = 0; i < nums1.length; i ++) {
            if(map.containsKey(nums1[i]) && map.get(nums1[i]) > 0) {
                nums2[k++] = nums1[i];
                map.put(nums1[i], map.get(nums1[i]) - 1);
            }
        }

        return Arrays.copyOfRange(nums2, 0, k);
    }
}
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map1 = new HashMap<>();
        for(int n: nums1) {
            map1.put(n, map1.getOrDefault(n, 0) + 1);
        }

        Map<Integer, Integer> map2 = new HashMap<>();
        for(int n2: nums2) {
            map2.put(n2, map2.getOrDefault(n2, 0) + 1);
        }

        List<Integer> res = new ArrayList<>();

        for(Map.Entry<Integer, Integer> entry: map1.entrySet()) {
            int key = entry.getKey();
            if(map2.containsKey(key)) {
                int times = Math.min(map2.get(key), entry.getValue());
                for(int i = 0; i < times; i ++) {
                    res.add(key);
                }
            }
        }

        int[] arrRes = new int[res.size()];
        for(int i = 0; i < res.size(); i ++) {
            arrRes[i] = res.get(i);
        }

        return arrRes;
    }
}

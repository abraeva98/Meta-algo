class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        /*
            matrix = [[1,  5, 9],
                      [10,11,13],
                      [12,13,15]], k = 6
                      1, 5, 9, 10, 11, 12, 13, 13, 15

                      
        */
        int n = matrix.length;
        int[] flatArr = new int[n * n];
        int idx = 0;
        for(int i = 0; i < n; i ++) {
            for(int j = 0; j < n; j ++) {
                flatArr[idx++] = matrix[i][j];
            }
        }

        int left = 0;
        int right = n * n - 1;
        
        while(left < right) {
            int pivotIdx = findPivotIdx(flatArr, left, right);
            if(pivotIdx == k - 1) return flatArr[pivotIdx];
            if(pivotIdx > k - 1) {
                right = pivotIdx - 1;
            } else {
                left = pivotIdx + 1;
            }
        }
        return flatArr[k - 1];
    }

    public int findPivotIdx(int[] nums, int start, int end) {
        int pivot = nums[end];
        int pivotIdx = start;

        for(int i = start; i < end; i ++) {
            if(nums[i] < pivot) {
                int temp = nums[i];
                nums[i] = nums[pivotIdx];
                nums[pivotIdx++] = temp;
            }
        }

        nums[end] = nums[pivotIdx];
        nums[pivotIdx] = pivot;

        return pivotIdx;
    }
}

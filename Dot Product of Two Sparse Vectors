class SparseVector {
    ArrayList<int[]> map = new ArrayList<>();

    SparseVector(int[] nums) {
        for(int i = 0; i < nums.length; i ++) {
            if(nums[i] != 0) {
                map.add(new int[]{i, nums[i]});
            }
        }
    }
    
	// Return the dotProduct of two sparse vectors
    public int dotProduct(SparseVector vec) {
        int idx1 = 0;
        int idx2 = 0;
        int dotProduct = 0;
        /*
        [1,0,0,2,3] -> [[0, 1], [3, 2], [3, 3]]
        [0,3,0,4,0] -> [[1, 3], [3, 4]]
        */
        while(idx1 < map.size() && idx2 < vec.map.size()) {
            if(map.get(idx1)[0] == vec.map.get(idx2)[0]) {
                dotProduct += map.get(idx1)[1] * vec.map.get(idx2)[1]; 
                idx1 += 1;
                idx2 += 1;
            } else if(map.get(idx1)[0] < vec.map.get(idx2)[0]) {
                idx1 += 1;
            } else {
                idx2 += 1;
            }
        }
        return dotProduct;
    }
}

class SparseVector {
    HashMap<Integer, Integer> map = new HashMap<>();

    SparseVector(int[] nums) {
        for(int i = 0; i < nums.length; i ++) {
            if(nums[i] != 0) {
                map.put(i, nums[i]);
            }
        }
    }
    
	// Return the dotProduct of two sparse vectors
    public int dotProduct(SparseVector vec) {
        HashMap<Integer, Integer> largest = vec.map.size() > map.size() ? vec.map : this.map;
        HashMap<Integer, Integer> smallest = vec.map.size() > map.size() ? this.map : vec.map;
        int dotProduct = 0;

        for(Integer key: largest.keySet()) {
            if(smallest.containsKey(key)) {
                dotProduct += largest.get(key) * smallest.get(key);
            }
        }
        return dotProduct;
    }
}

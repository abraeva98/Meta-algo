class Solution {
    public int[][] kClosest(int[][] points, int k) {
        int left = 0;
        int right = points.length - 1;

        while (left < right) {
            int pivotIdx = findPivot(points, left, right);
            if (pivotIdx < k - 1) {
                left = pivotIdx + 1;
            } else if(pivotIdx > k - 1) {
                right = pivotIdx - 1;
            } else {
                return Arrays.copyOfRange(points, 0, k);
            }
        }
        return Arrays.copyOfRange(points, 0, k);
    }

    public int findPivot(int[][] points, int start, int end) {
        int pivot = distance(points[end]);
        int pivotIdx = start;

        for (int idx = start; idx < end; idx++) {
            int currDistance = distance(points[idx]);
            if (currDistance < pivot) { // Move closer points to the left
                swap(points, pivotIdx, idx);
                pivotIdx++;
            }
        }

        swap(points, pivotIdx, end); // Place pivot in its correct position
        return pivotIdx;
    }

    public void swap(int[][] points, int i, int j) {
        int[] temp = points[i];
        points[i] = points[j];
        points[j] = temp;
    }

    public int distance(int[] point) {
        return point[0] * point[0] + point[1] * point[1]; // Squared distance
    }
}


class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Pair<Integer, int[]>> maxHeap = new PriorityQueue<>((a, b) -> Integer.compare(b.getKey(), a.getKey()));
        for(int[] point: points) {
            int euclideanDistance = (int) point[0] * point[0] + point[1] * point[1];
            maxHeap.offer(new Pair(euclideanDistance, point));
            if(maxHeap.size() > k) {
                maxHeap.poll();
            }
        }

        int[][] res = new int[k][2];
        int idx = 0;

        while(!maxHeap.isEmpty()){
            res[idx] = maxHeap.poll().getValue();
            idx += 1;
        }

        return res;
    }
}

class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Pair<Integer, int[]>> maxHeap = new PriorityQueue<>((a, b) -> Integer.compare(b.getKey(), a.getKey()));
        for(int[] point: points) {
            int euclideanDistance = (int) point[0] * point[0] + point[1] * point[1];
            maxHeap.offer(new Pair(euclideanDistance, point));
            if(maxHeap.size() > k) {
                maxHeap.poll();
            }
        }

        int[][] res = new int[k][2];
        int idx = 0;

        while(!maxHeap.isEmpty()){
            res[idx] = maxHeap.poll().getValue();
            idx += 1;
        }

        return res;
    }
}

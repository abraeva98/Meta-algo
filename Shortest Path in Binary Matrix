class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        if(grid[0][0] == 1) return -1;

        int[][] moves = new int[][]{{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};

        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0});
        grid[0][0] = 1;

        int path = 1;

        while(!queue.isEmpty()) {
            int size = queue.size();
            
            for(int i = 0; i < size; i ++) {
                int[] curr = queue.poll();
                if(curr[0] == grid.length - 1 && curr[1] == grid.length - 1) return path;//grid[curr[0]][curr[1]];
                int distance = grid[curr[0]][curr[1]];
                for(int[] move: moves) {
                    int nextX = curr[0] + move[0];
                    int nextY = curr[1] + move[1];
                    if(nextX < 0 || nextY < 0 || nextX >= grid.length || nextY >= grid.length || grid[nextX][nextY] != 0) {
                        continue;
                    }
                    grid[nextX][nextY] = distance + 1;
                    queue.add(new int[]{nextX, nextY});
                }
            }
            path += 1;
        }
        return -1;
    }
}
